on:
  workflow_call:
    inputs:
      source-directory:
        type: string
        description: Directory containing the main source of the project. Usually force-app, but can be something else. This is used to determine which entry in packageDirectories in sfdx-project.json is the main one. Defaults to force-app.
        required: false
        default: force-app
      instance-url:
        type: string
        description: Salesforce instance URL of the target org
        required: true
      client-id:
        type: string
        description: OAuth client ID (sometimes called consumer key) of the connected app on Salesforce used to connect to the target org
        required: true
      jwt-key-encrypted:
        type: string
        description: Ansible Vault-encrypted private key to connect to the target org with using the JWT flow. (This should be encrypted using ansible-vault encrypt, NOT ansible-vault encrypt_string!)
        required: true
      username:
        type: string
        description: Username of Salesforce user to authenticate as on the target org
        required: true
      run-tests:
        type: boolean
        description: Whether to run tests as part of the deployment. This is required when deploying to a production org.
        required: true
    secrets:
      ansible-vault-password:
        description: Password to be used to decrypt the `jwt-key-encrypted`.
        required: true
jobs:
  debug:
    runs-on: ubuntu-latest
    steps:
      - name: print out inputs (for debugging purposes)
        run: |
          echo 'inputs.instance-url = ${{ inputs.instance-url }}' 
          echo 'inputs.client-id = ${{ inputs.client-id }}' 
          echo 'inputs.jwt-key-encrypted = ${{ inputs.jwt-key-encrypted }}' 
          echo 'inputs.username = ${{ inputs.username }}' 
          echo 'inputs.run-tests = ${{ inputs.run-tests }}'
  build:
    runs-on: ubuntu-latest
    steps:
      - name: check out code
        uses: actions/checkout@v4

      - name: install jq
        run: sudo apt-get install -y jq

      - name: set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x

      - name: install Salesforce CLI (sfdx)
        run: npm list -g @salesforce/cli || npm install -g @salesforce/cli

      - name: package the source as metadata
        run: |
          mkdir -p "target/${{ github.event.repository.name }}-${{ github.sha }}"
          sf project convert source --source-dir "${{ inputs.source-directory }}" --output-dir="target/${{ github.event.repository.name }}-${{ github.sha }}"

      - name: find unit test classes in project
        run: |
          echo "Finding unit tests in project..."
          find force-app/test -name '*.cls' | while read test; do
            testClass="$(basename "${test}" .cls)"
            echo "${testClass}" >>target/test-classes.txt
          done

      - name: archive test-classes.txt
        uses: actions/upload-artifact@v4
        with:
          name: test-classes.txt
          path: target/test-classes.txt

      - name: archive metadata directory
        uses: actions/upload-artifact@v4
        with:
          name: "${{ github.event.repository.name }}-${{ github.sha }}.zip"
          path: target/${{ github.event.repository.name }}-${{ github.sha }}

  deploy:
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - name: check out code
        uses: actions/checkout@v4

      - name: install jq
        run: sudo apt-get install -y jq

      - name: set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18.x

      - name: install Salesforce CLI
        run: npm list -g @salesforce/cli || npm install -g @salesforce/cli

      - name: create unsigned plugin allowlist
        run: |
          mkdir -p $HOME/.config/sf
          echo '[ "@dxatscale/sfpowerscripts", "apex-code-coverage-transformer" ]' > $HOME/.config/sf/unsignedPluginAllowList.json

      - name: write Ansible Vault password to file
        run: echo "${{ secrets.ansible-vault-password }}" >.vault-password

      - name: write encrypted JWT key to file
        run: echo '${{ inputs.jwt-key-encrypted }}' >.jwt-key

      - name: decrypt the private key for the Continuous Integration connected app
        run: ansible-vault decrypt --vault-password-file=.vault-password .jwt-key

      - name: connect to org
        run: |
          sf auth jwt grant \
              --client-id="${{ inputs.client-id }}" \
              --jwt-key-file=.jwt-key \
              --instance-url=${{ inputs.instance-url }} \
              --username=${{ inputs.username }} \
              --set-default

      - name: download metadata ZIP file
        uses: actions/download-artifact@v4
        with:
          name: "${{ github.event.repository.name }}-${{ github.sha }}.zip"
          path: "target/${{ github.event.repository.name }}"

      - name: download test classes file
        uses: actions/download-artifact@v4
        with:
          name: test-classes.txt
          path: target

      - name: deploy to org and run Apex tests
        run: |
          timeout=180
          testflags=$(cat target/test-classes.txt | while read testClass; do
            echo -n "--tests=${testClass} "
          done)
          echo "Deploying to ${{ inputs.username }} and running unit tests... (timeout ${timeout} minutes)"
          sf project deploy start --target-org="${{ inputs.username }}" --test-level=RunSpecifiedTests ${testflags}--coverage-formatters=json --results-dir=reports --metadata-dir="target/${{ github.event.repository.name }}" --wait=${timeout}

      - name: archive target directory
        uses: actions/upload-artifact@v4
        with:
          name: target
          path: target
        if: always()
